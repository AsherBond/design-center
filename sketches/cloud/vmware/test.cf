body common control
{
      bundlesequence => { cfsketch_g, cfsketch_run };
      inputs => { @(cfsketch_g.inputs) };
}


# environment common bundles

# environment cf_sketch_testing
bundle common cf_sketch_testing
{
  vars:
      "activated" string => "any";
      "env_vars" slist => { "activated", "test", "verbose" };
      "test" string => "any";
      "verbose" string => "any";
  classes:
      "runenv_cf_sketch_testing_activated" expression => "any";
      "runenv_cf_sketch_testing_test" expression => "any";
      "runenv_cf_sketch_testing_verbose" expression => "any";
}


# activation data
bundle common cfsketch_g
{
  vars:
      # Files that need to be loaded for the activated sketches and
      # their dependencies.
      "inputs" slist => { "../../libraries/dclib-3.5.0/library.cf", "../../libraries/dclib/library.cf", "../../libraries/copbl/cfengine_stdlib.cf", "main.cf" };
}

bundle agent cfsketch_run
{
  vars:

      # array 'mymetadata' from definition sketch metadata, activation ___001_Cloud_Services_VMWare_ensure
      "___001_Cloud_Services_VMWare_ensure_mymetadata[api][class][type]" string => "string";
      "___001_Cloud_Services_VMWare_ensure_mymetadata[api][count][type]" string => "string";
      "___001_Cloud_Services_VMWare_ensure_mymetadata[api][count_command][type]" string => "string";
      "___001_Cloud_Services_VMWare_ensure_mymetadata[api][hub][type]" string => "string";
      "___001_Cloud_Services_VMWare_ensure_mymetadata[api][install_cfengine][type]" string => "boolean";
      "___001_Cloud_Services_VMWare_ensure_mymetadata[api][instance_count][type]" string => "return";
      "___001_Cloud_Services_VMWare_ensure_mymetadata[api][mymetadata][type]" string => "metadata";
      "___001_Cloud_Services_VMWare_ensure_mymetadata[api][options][type]" string => "array";
      "___001_Cloud_Services_VMWare_ensure_mymetadata[api][runenv][type]" string => "environment";
      "___001_Cloud_Services_VMWare_ensure_mymetadata[api][start_command][type]" string => "string";
      "___001_Cloud_Services_VMWare_ensure_mymetadata[api][stop_command][type]" string => "string";
      "___001_Cloud_Services_VMWare_ensure_mymetadata[authors]" slist => { "Ted Zlatanov <tzz@lifelogs.com>" };
      "___001_Cloud_Services_VMWare_ensure_mymetadata[depends]" slist => { "CFEngine::dclib", "CFEngine::dclib::3.5.0", "CFEngine::stdlib" };
      "___001_Cloud_Services_VMWare_ensure_mymetadata[license]" string => "MIT";
      "___001_Cloud_Services_VMWare_ensure_mymetadata[location]" string => "/home/tzz/.cfagent/inputs/sketches/cloud/vmware";
      "___001_Cloud_Services_VMWare_ensure_mymetadata[manifest]" slist => { "README.md", "main.cf", "params/demo.json", "scripts/cf3vmware" };
      "___001_Cloud_Services_VMWare_ensure_mymetadata[manifest_cf]" slist => { "main.cf" };
      "___001_Cloud_Services_VMWare_ensure_mymetadata[manifest_docs]" slist => { "README.md" };
      "___001_Cloud_Services_VMWare_ensure_mymetadata[manifest_exe]" slist => { "scripts/cf3vmware" };
      "___001_Cloud_Services_VMWare_ensure_mymetadata[manifest_extra]" slist => { "params/demo.json" };
      "___001_Cloud_Services_VMWare_ensure_mymetadata[manifest_test]" slist => { "cf_null" };
      "___001_Cloud_Services_VMWare_ensure_mymetadata[name]" string => "Cloud::Services::VMWare";
      "___001_Cloud_Services_VMWare_ensure_mymetadata[tags]" slist => { "cfdc", "cloud", "vmware", "vcli", "enterprise_compatible" };
      "___001_Cloud_Services_VMWare_ensure_mymetadata[version]" string => "1";

      # array 'options' from definition parameter definition from /home/tzz/source/cfengine/design-center/tools/test/../../sketches/cloud/vmware/params/demo.json-1, activation ___001_Cloud_Services_VMWare_ensure

  methods:
    any::
      "cfsketch_g" usebundle => "cfsketch_g";
      "cf_sketch_testing" usebundle => "cf_sketch_testing";

    runenv_cf_sketch_testing_activated::
      "___001_Cloud_Services_VMWare_ensure" usebundle => cfdc_cloud_vmware:ensure("cf_sketch_testing", "default:cfsketch_run.___001_Cloud_Services_VMWare_ensure_mymetadata", "1", "cfworker", "1", "$(sys.ipv4)", "/root/start_vm.sh", "/root/stop_vm.sh", "/root/count_vm.sh", "default:cfsketch_run.___001_Cloud_Services_VMWare_ensure_options"), ifvarclass => "any", useresult => "return____001_Cloud_Services_VMWare_ensure";

  reports:
    inform_mode::
      "activation ___001_Cloud_Services_VMWare_ensure returned instance_count = $(return____001_Cloud_Services_VMWare_ensure[instance_count])";
      "activation ___001_Cloud_Services_VMWare_ensure could not run because it requires classes any" ifvarclass => "inform_mode.!(any)";
}
