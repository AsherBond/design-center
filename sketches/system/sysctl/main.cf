body file control
{
      namespace => "cfdc_sysctl";
}

bundle agent set(runenv, metadata, given_sysctl_file, empty_first, ensured_kv, removed_kv, removed_vars)
{
#@include "../../sketch_template/standard.inc"
  vars:
      "sysctl_vars" slist => getindices(ensured_kv);
      "removed_kvindices" slist => getindices(removed_kv);

      # build the array of things to be removed
      "removed[$(removed_vars)]"  string => ".*";
      "removed[$(removed_kvindices)]" string => "$(removed_kv[$(removed_kvindices)])";

    second_class_pass::
      "removed_indices" slist => { getindices("cfdc_sysctl:set.removed") };

    any::
      "sysctl_file" string => "$(path_prefix)$(given_sysctl_file)";

  classes:
      # We need to know if we are on the second pass
      "second_class_pass" and => {"first_class_pass"};
      "first_class_pass" and => {"any"};

      "empty_first" expression => strcmp($(empty_first), "1");

  files:
    second_class_pass.!empty_first::
      "$(sysctl_file)"
      create => "true",
      handle => "sysctl_files_noempty",
      edit_line => default:set_variable_values("$(ensured_kv)"),
      classes => default:if_repaired("sysctl_reload"),
      comment => "Only ensure specific defined values are present";

    second_class_pass.empty_first::
      "$(sysctl_file)"
      create => "true",
      handle => "sysctl_files_empty_first",
      edit_defaults => default:empty,
      edit_line => default:set_variable_values("$(ensured_kv)"),
      classes => default:if_repaired("sysctl_reload"),
      comment => "Empty file before ensuring specified values are present,
this effectively promises the full file content.";

    second_class_pass::
      "$(sysctl_file)"
      create => "true",
      edit_line => cfdc_sysctl:del_variable_values("cfdc_sysctl:set.removed"),
      classes => default:if_repaired("sysctl_reload"),
      comment => "Ensure the variables and values given do not exist at all.";

  commands:
    sysctl_reload::
      "$(exec_prefix)/sbin/sysctl"
      args => "-p",
      classes => default:if_repaired("sysctl_reloaded"),
      comment => "Reload sysctl after repairing configuration";

  reports:
    any::
      "$(sysctl_file)" bundle_return_value_index => "sysctl_file";

    second_class_pass.verbose.empty_first::
      "$(dcbundle): $(sysctl_file) will be emptied before editing";

    second_class_pass.verbose::
      "$(dcbundle): VERBOSE is turned on for sysctl";

      "$(dcbundle): Set sysctl var: $(sysctl_vars)=$(ensured_kv[$(sysctl_vars)])";
      "$(dcbundle): Remove sysctl var: $(removed_indices)=$(cfdc_sysctl:set.removed[$(removed_indices)])";

      "$(dcbundle): I repaired $(sysctl_file), sysctl needs to be reloaded"
      ifvarclass => "sysctl_reload";

      "$(dcbundle): I successfully reloaded sysctl"
      ifvarclass => "sysctl_reloaded";

}

bundle edit_line del_variable_values(v)
{
  vars:

      "index" slist => getindices("$(v)");

      # Be careful if the index string contains funny chars

      "cindex[$(index)]" string => canonify("$(index)");

  delete_lines:

      "$(index)\s*=\s*$($(v)[$(index)])"
      comment => "Delete a specific variable";

  reports:
    verbose::
      "$(this.bundle): we will delete lines matching: '$(index)\s*=\s*$($(v)[$(index)])'";
}
