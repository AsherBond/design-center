body file control
{
      namespace => "cfdc_motd";
}

bundle common define
{
  vars:
      "motd_path"
      string => "/etc/motd",
      handle => "vars_motd_path",
      comment => "Path of the MotD file read by login";

      "motd_owner"
      string => "root",
      handle => "vars_motd_owner",
      comment => "User/Group that owns the motd files";

      "default_target"
      string => "/var/run/motd",
      handle => "vars_default_target",
      comment => "Path to the Debian default, regenerated MotD file";

      "tail_template"
      string => "/etc/motd.tail",
      handle => "vars_tail_template",
      comment => "Path to the Debian MotD template";

      "static_target"
      string => "/etc/motd.static",
      handle => "vars_static_target",
      comment => "Path to a static MotD file to create";
}

bundle agent entry(runenv, metadata, message, static)
{
  vars:
      "vars" slist => { "@(default:$(runenv).env_vars)" };
      "$(vars)" string => "$(default:$(runenv).$(vars))";

    test::
      "message_owner"
      string => getenv("LOGNAME",100),
      depends_on => { "vars_motd_owner" },
      handle => "vars_message_owner",
      comment => "Owner of the MotD file";

      "path_prefix"
      string => "/tmp",
      handle => "vars_path_prefix",
      comment => "Prefix to file paths";

    !test::
      "message_owner"
      string => "$(cfdc_motd:define.motd_owner)",
      depends_on => { "vars_motd_owner" },
      handle => "vars_message_owner",
      comment => "Owner of the MotD files";

      "path_prefix"
      string => "",
      handle => "vars_path_prefix",
      comment => "Prefix to file paths";

    any::
      "link_path"
      string => "$(path_prefix)$(cfdc_motd:define.motd_path)",
      depends_on => { "vars_path_prefix", "vars_motd_path" },
      handle => "vars_link_path",
      comment => "Path to the MotD link to promise";

    !static::
      "target_path"
      string => "$(path_prefix)$(cfdc_motd:define.default_target)",
      depends_on => { "vars_path_prefix", "vars_define_target" },
      handle => "vars_target_path",
      comment => "Path to the Debian generated MotD file";

      "message_path"
      string => "$(path_prefix)$(cfdc_motd:define.tail_template)",
      depends_on => { "vars_path_prefix", "vars_tail_template" },
      handle => "vars_message_path",
      comment => "Path to the motd.tail template file";

    static::
      "target_path"
      string => "$(path_prefix)$(cfdc_motd:define.static_target)",
      depends_on => { "vars_path_prefix", "vars_static_target" },
      handle => "vars_target_path",
      comment => "Path to the static MotD file to create";

      "message_path"
      string => "$(path_prefix)$(cfdc_motd:define.static_target)",
      depends_on => { "vars_path_prefix", "vars_static_target" },
      handle => "vars_message_path",
      comment => "Path to the static MotD file to create";

  classes:
      "$(vars)" expression => "default:runenv_$(runenv)_$(vars)";

      "static"
      expression => strcmp($(static),"1"),
      comment => "Install a static MOTD";

  files:
      "$(message_path)"
      pathtype => "literal",
      create => "true",
      move_obstructions => "true",
      edit_defaults => default:empty,
      edit_line => default:insert_lines("$(message)"),
      perms => default:mog("444",$(message_owner),$(message_owner)),
      depends_on => { "vars_message_owner", "vars_message_path" },
      handle => "files_message",
      comment => "Create and populate the static motd file";

      "$(link_path)"
      pathtype => "literal",
      link_from => default:ln_s($(target_path)),
      move_obstructions => "true",
      depends_on => { "vars_link_path", "vars_target_path", "files_message" },
      handle => "files_symlink",
      comment => "Create symlink to the static motd file";

  methods:
    verbose::
      "metadata" usebundle => default:report_metadata($(this.bundle), $(metadata)),
      inherit => "true";

  reports:
    verbose::
      "$(this.bundle): imported environment '$(runenv)' var '$(vars)' with value '$($(vars))'";
      "$(this.bundle): imported environment '$(runenv)' class '$(vars)' because 'default:runenv_$(runenv)_$(vars)' was defined"
      ifvarclass => "$(vars)";

      # use the "verbose" context to show the sketch operation (for the user)
    verbose::
      "$(this.bundle): running in verbose mode";
      # use the "test" context to help debug the sketch (for the developer)
    test::
      "$(this.bundle): running in test mode";
      "$(this.bundle): message_owner = $(message_owner)";
      "$(this.bundle): message_path  = $(message_path)";
}
