body file control
{
      namespace => "cfdc_motd";
}

bundle agent entry(runenv, metadata, motd, motd_path, prepend_command, dynamic_path, symlink_path)
{
#@include "REPO/sketch_template/standard.inc"

  vars:
      "main_path"
      string => "$(path_prefix)$(motd_path)",
      comment => "Path of the main MotD (typical the only one)";

      "owner" string => ifelse("test", $(this.promiser_uid),
                               "root"),
      comment => "Owner of the MotD file";

      "output_path"
      string => "$(path_prefix)$(dynamic_path)",
      comment => "Path of the main MotD (typically the only one)";

    activated.create_symlink::
      "symlink_link"
      string => "$(path_prefix)$(symlink_path)",
      comment => "Path of the main MotD (typical the only one)";

    activated.!prepend_command_not_given::
      "output"
      string => execresult("$(exec_prefix)$(prepend_command)",
                           "noshell"),
      comment => "Command output to prepend to MtoD";

    activated.!(prepend_command_not_given|dynamic_path_given)::
      "main_lines"
      slist => { $(output), $(motd) },
      comment => "Lines to print to the MotD";

    activated.(prepend_command_not_given|dynamic_path_given)::
      "main_lines"
      slist => { $(motd) },
      comment => "Lines to print to the MotD";

  classes:
    activated::
      "prepend_command_not_given"
      expression => strcmp($(prepend_command),""),
      comment => "Skip executing prepend command if it is not set";

      "create_symlink"
      not => strcmp($(symlink_path),""),
      comment => "Create symlink if the target is specified";

      "dynamic_path_given"
      not => strcmp($(dynamic_path),""),
      comment => "Split MotD into dynamic and static portions";

  files:
    have_path_prefix.activated::
      "$(main_path)"
      pathtype => "literal",
      create => "true",
      move_obstructions => "true",
      edit_defaults => default:empty,
      edit_line => default:insert_lines($(main_lines)),
      perms => default:mog("444",$(owner),$(owner)),
      handle => "files_main",
      classes => default:classes_generic("files_main"),
      comment => "Create and populate the static motd file";

    have_path_prefix.have_exec_prefix.activated.dynamic_path_given.!prepend_command_not_given::
      "$(output_path)"
      pathtype => "literal",
      create => "true",
      move_obstructions => "true",
      edit_defaults => default:empty,
      edit_line => default:insert_lines($(output)),
      perms => default:mog("444", $(owner), $(owner)),
      handle => "files_dynamic_populated",
      classes => default:classes_generic("files_dynamic"),
      comment => "Create and populate the dynamic motd file";

    have_path_prefix.activated.dynamic_path_given.prepend_command_not_given::
      "$(output_path)"
      pathtype => "literal",
      create => "true",
      move_obstructions => "true",
      edit_defaults => default:empty,
      perms => default:mog("444", $(owner), $(owner)),
      handle => "files_dynamic_empty",
      classes => default:classes_generic("files_dynamic"),
      comment => "create an empty dynamic motd file";

    have_path_prefix.activated.create_symlink::
      "$(symlink_link)"
      pathtype => "literal",
      move_obstructions => "true",
      link_from => default:ln_s($(main_path)),
      depends_on => { "files_main" },
      handle => "files_symlink",
      classes => default:classes_generic("files_symlink"),
      comment => "create a symlink to the motd file";

  reports:
    have_path_prefix.test::
      "$(dcbundle): owner = $(owner)";
      "$(dcbundle): output = $(output)" ifvarclass => "!prepend_command_not_given";
      "$(dcbundle): main_path = $(main_path)";
      "$(dcbundle): main_lines = $(main_lines)";
      "$(dcbundle): output_path = $(output_path)" ifvarclass => "dynamic_path_given";
      "$(dcbundle): symlink_link = $(symlink_link)" ifvarclass => "create_symlink";
}
