body file control
{
  namespace => "cfdc_vcs";
}

bundle common runenv(runenv)
{
  vars:
      "vars" slist => { "@(default:$(runenv).env_vars)" };
      "$(vars)" string => "$(default:$(runenv).$(vars))";

  classes:
      "$(vars)" expression => "default:runenv_$(runenv)_$(vars)";

  reports:
    verbose::
      "Imported var $(vars) with value $($(vars))";
}

bundle agent mirror(runenv, metadata, prefix, vcs, path, origin, branch, runas, umask, parent_dir)
{
  methods:
      "runenv" usebundle => cfdc_sshd:runenv($(runenv));

  vars:
      # return value
      "deploy_path" string => "$(path)",
      ifvarclass => "$(canon_prefix)vcs_mirrored|$(canon_prefix)vcs_updated";

      "canon_prefix" string => canonify("$(prefix)");
      "vcs_type" string => lastnode("$(vcs)","/");

    wipe::
      "git_update_command" slist =>
      {
        # Fetch repo contents
        "$(vcs) fetch -t origin +refs/heads/*:refs/remotes/origin/*",
        # Remove untracked files
        "$(vcs) clean -f -f -x -q -d .",
        # Discard changes to index and working tree since HEAD
        "$(vcs) reset -q --hard HEAD",
        # Check out the proper branch
        "$(vcs) checkout -q $(branch)",
        # Pull the latest changes from origin
        "$(vcs) pull -q -s recursive -Xtheirs origin $(branch)",
        # Reset the working tree to the latest updates
        "$(vcs) reset -q --hard HEAD",
      };

    nowipe::
      "git_update_command" slist =>
      {
        "$(vcs) pull origin $(branch)",
      };

    any::

      "git_mirror_command" slist =>
      {
        # clone the given repository with Git
        "$(vcs) clone -b $(branch) $(origin) $(path)"
      };

      "git_configfile" string => "$(path)/.git/config";

      "git_config_template" string => "
[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
[remote \"origin\"]
        fetch = +refs/heads/*:refs/remotes/origin/*
        url = $(origin)
[branch \"master\"]
        remote = origin
        merge = refs/heads/master
[branch \"$(branch)\"]
        remote = origin
        merge = refs/heads/$(branch)
",
      comment => "The $(git_configfile) template.",
      handle => "update_vars_git_config_template";

    nowipe::
      "svn_update_command" slist =>
      {
        "$(vcs) cleanup",
        "$(vcs) up",
      };

    wipe::
      "svn_update_command" slist =>
      {
        "$(vcs) cleanup",
        "$(vcs) up",
        "$(vcs) revert",
      };

    any::
      "svn_mirror_command" slist =>
      {
        # clone the given repository with Subversion
        "$(vcs) co $(origin) $(path)"
      };

      "svn_configfile" string => "$(path)/.svn/entries";

    parent_parsed::
      "parent_path" string => "$(parent_capture[1])";

    any::
      # pretty-print the authors and dependencies
      "dependencies" string => join(", ", "$(metadata)[depends]");
      "authors" string => join(", ", "$(metadata)[authors]");

  classes:
      "nowipe" expression => "$(prefix)nowipe";
      "wipe" expression => "!nowipe";

      "use_git" expression => strcmp(lastnode("$(vcs)","/"), "git");
      "use_svn" expression => strcmp(lastnode("$(vcs)","/"), "svn");
      "known_vcs" or => { "use_git", "use_svn" };
      "unknown_vcs" expression => "!known_vcs";

      "variables_ok" and => { "known_vcs" };

      "parent_dir_provided" expression => isvariable("$(parent_dir)[owner]");
      "no_parent_dir_provided" expression => "!parent_dir_provided";
      "parent_parsed" expression => regextract(
                                                "(.+)/[^/]+",
                                                $(path),
                                                "parent_capture"
                                              );

      "path_exists" expression => fileexists("$(path)");

      # I can't use vcs_configfile here because it doesn't converge soon enough
      "vcsconfig_exists" expression => fileexists("$($(vcs_type)_configfile)"),
      ifvarclass => "known_vcs";

      "no_vcsconfig_exists" expression => "!vcsconfig_exists";

      "second_pass" expression => "any";
      "third_pass" expression => "second_pass";

    parent_parsed::
      "parent_exists" expression => isdir("$(parent_path)");
      "no_parent_exists" expression => "!parent_exists";

  files:
    parent_parsed.no_parent_exists.parent_dir_provided::
      "$(parent_path)/."
      perms => default:mog("$(parent_dir)[perms]",
                           "$(parent_dir)[owner]",
                           "$(parent_dir)[group]");

    variables_ok.use_git::
      "$(git_configfile)"
      handle => "$(vcs_type)_configfile_contents",
      comment => "Expand Git config file from variable",
      create => "false",
      edit_defaults => default:empty,
      edit_line => default:insert_lines("$(git_config_template)");

  commands:

    variables_ok.vcsconfig_exists::
      "$($(vcs_type)_update_command)"
      handle     => "$(vcs_type)_update_with_user_command",
      contain    => test_aware_contain("$(runas)", "$(path)", "$(umask)"),
      ifvarclass => "!$(canon_prefix)vcs_mirrored",
      classes    => default:if_ok("$(canon_prefix)vcs_updated"),
      comment    => "Update an existing VCS repository in $(path), user override to $(runas)";

    variables_ok.!vcsconfig_exists::
      "$($(vcs_type)_mirror_command)"
      handle     => "$(vcs_type)_mirror_with_user_command",
      contain    => test_aware_contain("$(runas)", "/", "$(umask)"),
      ifvarclass => "!$(canon_prefix)vcs_mirrored",
      classes    => default:if_ok("$(canon_prefix)vcs_mirrored"),
      comment    => "Clone a VCS repository in $(path), user override to $(runas)";

  reports:
    verbose::
      "$($(metadata)[name]) license = $($(metadata)[license])";
      "$($(metadata)[name]) dependencies = $(dependencies)";

      "$($(metadata)[name]) version $($(metadata)[version]) by $(authors) starting up...";
    verbose::
      "$(this.bundle) running in verbose mode";
    test::
      "$(this.bundle) running in test mode";

    unknown_vcs::
      "Sorry, the requested VCS '$(vcs)' is not handled yet.";

    verbose.variables_ok::
      "Cool, we're using $(vcs_type).  We will look for the config file $($(vcs_type)_configfile)";
      "VCS is $(vcs), to be executed as user $(runas) / umask $(umask), origin $(origin), branch $(branch), target path $(path).";
      "$(vcs_type)_update_command = $($(vcs_type)_update_command)";
      "$(vcs_type)_mirror_command = $($(vcs_type)_mirror_command)";

    verbose.variables_ok.vcsconfig_exists::
      "VCS config file $($(vcs_type)_configfile) exists";

    verbose.variables_ok.no_vcsconfig_exists::
      "VCS config file $($(vcs_type)_configfile) does not exist";

    default:verbose::
      "New clone of $(origin) (branch $(branch) created in $(path)"
      ifvarclass => "$(canon_prefix)vcs_mirrored";

    verbose.parent_parsed::
      "The parent path of $(path) was parsed to $(parent_path).";

    verbose.no_parent_parsed::
      "The parent path of $(path) could not be parsed to $(parent_path).";

    verbose.parent_parsed.parent_exists.third_pass::
      "The parent path $(parent_path) exists.";

    verbose.parent_parsed.no_parent_exists.third_pass::
      "The parent path $(parent_path) does not exist.";

    parent_parsed.no_parent_exists.parent_dir_provided.third_pass::
      "Creating parent path $(parent_path) because it doesn't exist.";

    parent_parsed.no_parent_exists.no_parent_dir_provided.third_pass::
      "Not creating parent path $(parent_path) even though it doesn't exist, because the parent_dir parameter was left blank.";

    variables_ok.path_exists.no_vcsconfig_exists::
      "Sorry, we could not clone $(origin) (branch $(branch)) in $(path) because that path already exists";
}

body contain test_aware_contain(user, dir, umask)
{
      chdir => "$(dir)";
      umask => "$(umask)";
    !test::
      exec_owner => "$(user)";
    test::
      exec_owner => getenv("LOGNAME", 100);
}
