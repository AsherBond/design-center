bundle agent dropdir_run(runenv, metadata, context, directory, days)
{
  vars:
      "vars" slist => { "@(default:$(runenv).env_vars)" };
      "$(vars)" string => "$(default:$(runenv).$(vars))";

      "activation_id" string => canonify("$(this.bundle)_$($(metadata)[activation][identifier])_$($(metadata)[activation][timestamp])");

      "scripts" slist => lsdir($(directory), "...+", "true");

  classes:
      "$(vars)"
      expression => "default:runenv_$(runenv)_$(vars)";
      "not_$(vars)"
      expression => "!default:runenv_$(runenv)_$(vars)";

  methods:
      "utils" usebundle => default:eu($(runenv)),
      inherit => "true";

      "cleanit" usebundle => dropdir_cleanit($(scripts),
                                             $(days),
                                             $(activation_id)),
      inherit => "true";

      "report run" usebundle => dropdir_report($(scripts),
                                               $(context),
                                               $(activation_id),
                                               "$(scripts) $(activation_id)"),
      inherit => "true";

    verbose::
      "metadata" usebundle => default:report_metadata($(this.bundle), $(metadata)),
      inherit => "true";

  reports:
    verbose::
      "$(this.bundle): running in verbose mode";
      "$(this.bundle): imported environment '$(runenv)' var '$(vars)' with value '$($(vars))'";
      "$(this.bundle): imported environment '$(runenv)' class '$(vars)' because 'default:runenv_$(runenv)_$(vars)' was defined"
      ifvarclass => "$(vars)";

    test::
      "$(this.bundle): running in test mode";
}

bundle agent dropdir_cleanit(script, days, id)
{
  classes:
      "cleanit" expression => isgreaterthan($(age), $(ago));
      "recent" not => isgreaterthan($(age), $(ago));

  vars:
      "pc" string => canonify($(pname));
      "age" string => filestat($(script), 'ctime');
      "ago" int => ago(0, 0, $(days), 0, 0, 0);

  files:
    cleanit.!test::
      "$(script)"
      delete => default:tidy,
      handle => "$(id)_script_clean",
      classes => default:if_ok("$(pc)_cleaned");

  reports:
    verbose::
      "$(this.bundle): $(script) age = $(age), limit = $(ago)";
      "$(this.bundle): $(script) is older than $(days) days, cleaning..." ifvarclass => "cleanit";
      "$(this.bundle): $(script) is newer than $(days) days, leaving it" ifvarclass => "recent";
      "$(this.bundle): $(script) was cleaned" ifvarclass => "$(pc)_cleaned";

    cleanit.test::
      "$(this.bundle): in test mode, simulating that $(script) was cleaned"
      handle => "$(id)_script_simulate_clean";
}

bundle agent dropdir_report(cmd, context, id, pname)
{
  classes:
      "runit" and => { fileexists($(cmd)), $(context) };

  vars:
      "pc" string => canonify($(pname));
      "canon_cmd" string => canonify($(cmd));

    runit::
      "out[$(canon_cmd)]"
      string => execresult($(cmd), "noshell"),
      handle => "$(id)_collect",
      comment => "Run and collect the output of the given command iff the context is true.";

  reports:
    verbose::
      "$(this.bundle): WE HAVE the required context '$(context)'"
      ifvarclass => "$(context)";

      "$(this.bundle): WE LACK the required context '$(context)'"
      ifvarclass => "!($(context))";

      "$(this.bundle): The command $(cmd) ran and collected output '$(out[$(canon_cmd)])'"
      ifvarclass => "runit";

      "$(this.bundle): The command $(cmd) doesn't exist or won't run in context '$(context)'"
      ifvarclass => "!runit";
}
