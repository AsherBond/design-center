body file control
{
      namespace => "cfdc_security_nologin";
}

bundle agent localuser_nologin(runenv, metadata, list_of_users, state)
{
  classes:
      "$(vars)" expression => "default:runenv_$(runenv)_$(vars)";
      "not_$(vars)" expression => "!default:runenv_$(runenv)_$(vars)";

  vars:
      "activation_id" string => canonify("$(this.bundle)_$($(metadata)[activation][identifier])_$($(metadata)[activation][timestamp])");

      "vars" slist => { "@(default:$(runenv).env_vars)" };
      "$(vars)" string => "$(default:$(runenv).$(vars))";

      "nologin_bin" string => "/usr/sbin/nologin";

  classes:
    "state_nologin"
      expression => strcmp( $(state), "nologin" ),
      scope => "namespace";

    "have_nologin"
      expression => isexecutable("$(nologin_bin)");

    "have_$(list_of_users)" expression => userexists("$(list_of_users)");


  commands:
    !nologin::
      "/bin/false"
        handle => "$(activation_id)_bad_parameter",
        comment => "Unexpected parameter, trigger a promise failed.";

  users:
    nologin::
      "$(list_of_users)"
        policy => "present",
        shell => "$(state[$(state)])",
        ifvarclass => "have_$(list_of_users)";

  methods:
      "Design Center Utils"
        usebundle => $(default:eu.path_prefix);
}


bundle agent etc_nologin(runenv, metadata, state, content)
{
  classes:
      "$(vars)" expression => "default:runenv_$(runenv)_$(vars)";
      "not_$(vars)" expression => "!default:runenv_$(runenv)_$(vars)";

  vars:
      "activation_id" string => canonify("$(this.bundle)_$($(metadata)[activation][identifier])_$($(metadata)[activation][timestamp])");

      "vars" slist => { "@(default:$(runenv).env_vars)" };
      "$(vars)" string => "$(default:$(runenv).$(vars))";

    "etc_nologin" string => "$(default:eu.path_prefix)etc/nologin";
    "valid_states" slist => { "present", "absent" }; # Same as choices in the sketch.metadata file. Its good to verify everywhere! Expect bad params!

  classes:
    "present"
      expression => strcmp( $(state), "present" );

    "absent"
      expression => strcmp( $(state), "absent" );

  commands:
    !(present|absent)::
      "/bin/false"
        handle => "$(activation_id)_bad_parameter_not_present_or_absent",
        comment => "Unexpected parameter, trigger a promise failed.";

  methods:
      "Design Center Utils"
        usebundle => default:eu($(runenv));

    present|absent::
      "_etc_nologin state"
        usebundle => etc_nologin_state($(given_etc_nologin), $(state), $(content)),
        handle => "$(activation_id)_methods_etc_nologin_state";

  reports:
    !(present|absent)::
      "$(this.bundle): ERROR invalid state given, only present or absent allowed given $(state)";
}

bundle agent etc_nologin_state(etc_nologin, state, content)
{
  files:
    present::
      "$(etc_nologin)"
        create => "true",
        edit_defaults => default:empty,
        handle => "$(activation_id)_state_files_present",
        classes => default:scoped_classes_generic("bundle", "_etc_nologin_present"),
        edit_line => default:append_if_no_line($(content));

    absent::
      "$(etc_nologin)"
        handle => "$(activation_id)_state_files_absent",
        classes => default:scoped_classes_generic("bundle", "_etc_nologin_absent"),
        delete => default:tidy;

  reports:
    DEBUG::
      "state = $(state)";
      "content = $(content)";
      "/etc/nologin = $(etc_nologin)";

    verbose._etc_nologin_present::
      "$(etc_nologin) is present";

    verbose._etc_nologin_absent::
      "$(etc_nologin) is absent";

    verbose.!(_etc_nologin_absent|_etc_nologin_present)::
      "This should never be reached.";
}
