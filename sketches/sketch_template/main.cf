body file control
{
  namespace => "cfdc_sketch_template";
}

bundle agent entry(prefix, bundle_home, myboolean, mytype, myip, myarray)
{
  classes:
      # note that demo.json uses bycontext to set mytype to "alpha"
      # when context A is defined, so context A indirectly triggers
      # use_alpha
      "use_alpha"     expression => strcmp($(mytype), "alpha");

      # Note that if you don't make the "mymodule" execution
      # conditional, cf-promises will fail to validate main.cf the
      # FIRST time, BEFORE "mymodule" is installed in
      # $(sys.workdir)/modules.
      "exists_module" expression => fileexists("$(sys.workdir)/modules/mymodule");

      # call the "mymodule" module
    exists_module::
      "ran_module" expression => usemodule("mymodule", "");

  vars:
      # often you need a unique value for the current run through a
      # bundle, especially if you use if_repaired and such.  The
      # canon_prefix will give you that.
      "canon_prefix" string => canonify("$(prefix)");

      # call the sample.sh script
      "sample_return" string => execresult("$(bundle_home)/scripts/sample.sh",
                                           "useshell");

      # pretty-print the authors and dependencies
      "dependencies" string => join(", ", "$(prefix)sketch_depends");
      "authors" string => join(", ", "$(prefix)sketch_authors");

  reports:
    default:debug::
      "$($(prefix)sketch_name) license = $($(prefix)sketch_license)";
      "$($(prefix)sketch_name) dependencies = $(dependencies)";

    default:verbose::
      "$($(prefix)sketch_name) version $($(prefix)sketch_version) by $(authors) starting up...";

    cfengine::
      # This will define localclass with a locally meaningful prefix
      # every time (otherwise, localclass will be global and will be
      # defined with the same name every time).
      "Hello there"
      classes => default:if_repaired("$(canon_prefix)localclass");

      # And this will use the localclass
      "Hello back"
      ifvarclass => "$(canon_prefix)localclass";

      # use the "verbose" context to display extra information (for the user)
    default:verbose::
      "Invoking entry_point: prefix $(prefix) type $(mytype) myarray lookup of path1 $($(myarray)[path1])";

      # use the "debug" context to help debug the sketch (for the developer)
    default:debug::
      "This is debugging; running from $(bundle_home)";
}
