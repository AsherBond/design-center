body file control
{
  namespace => "cfdc_sketch_template";
}

bundle common runenv(runenv)
{
  vars:
      "vars" slist => splitstring("$(default:$(runenv).env_vars_str)", " ", 999); # unpack the list of runenv scalars
      # "vars" slist => { "@(default:$(runenv).env_vars)" }; # we'll use this when we depend on 3.5.x because of a 3.4.x bug with slist iteration between bundles
      "$(vars)" string => "$(default:$(runenv).$(vars))";

  classes:
      "$(vars)" expression => "default:runenv_$(runenv)_$(vars)";

  reports:
    verbose::
      "Imported var $(vars) with value $($(vars))";
}

bundle agent entry(runenv, metadata, prefix, myboolean, mytype, myip, mylist, myarray)
{
  methods:
      "runenv" usebundle => cfdc_sketch_template:runenv($(runenv));

  vars:
      # often you need a unique value for the current run through a
      # bundle, especially if you use if_repaired and such.  The
      # canon_prefix will give you that.
      "canon_prefix" string => canonify("$(prefix)");

      # call the sample.sh script
      "sample_return" string => execresult("$($(metadata)[location])/scripts/sample.sh",
                                           "useshell");

      # pretty-print the authors and dependencies
      "dependencies" string => join(", ", "$(metadata)[depends]");
      "authors" string => join(", ", "$(metadata)[authors]");

  commands:
      # call a module included with the bundle
      "$($(metadata)[location])/modules/mymodule"
      module => "true";

  reports:
    verbose::
      "$($(metadata)[name]) license = $($(metadata)[license])";
      "$($(metadata)[name]) dependencies = $(dependencies)";

      "$($(metadata)[name]) version $($(metadata)[version]) by $(authors) starting up...";

    cfengine::
      # This will define localclass with a locally meaningful prefix
      # every time (otherwise, localclass will be global and will be
      # defined with the same name every time).
      "Hello there"
      classes => default:if_repaired("$(canon_prefix)localclass");

      # And this will use the localclass
      "Hello back"
      ifvarclass => "$(canon_prefix)localclass";

      "Running the external sample script gave us $(sample_return)";

      # use the "verbose" context to show the sketch operation (for the user)
    verbose::
      "$(this.bundle) running in verbose mode";
      # use the "test" context to help debug the sketch (for the developer)
    test::
      "$(this.bundle) running in test mode";
}
